diff --git a/node_modules/@subsquid/substrate-ingest/lib/parse/block.js b/node_modules/@subsquid/substrate-ingest/lib/parse/block.js
index ffa7b41..24375f5 100644
--- a/node_modules/@subsquid/substrate-ingest/lib/parse/block.js
+++ b/node_modules/@subsquid/substrate-ingest/lib/parse/block.js
@@ -9,6 +9,7 @@ var __metadata = (this && this.__metadata) || function (k, v) {
     if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
 };
 Object.defineProperty(exports, "__esModule", { value: true });
+const logger_1 = require("@subsquid/logger");
 exports.parseRawBlock = exports.BlockParser = void 0;
 const substrate_metadata_1 = require("@subsquid/substrate-metadata");
 const util_internal_1 = require("@subsquid/util-internal");
@@ -18,6 +19,7 @@ const call_1 = require("./call");
 const feeCalc_1 = require("./feeCalc");
 const util_2 = require("./util");
 const validator_1 = require("./validator");
+const log = (0, logger_1.createLogger)('sqd:substrate-ingest');
 class BlockParser {
     constructor(spec, validators, raw) {
         this.spec = spec;
@@ -99,6 +101,15 @@ class BlockParser {
             let bytes = Buffer.from(hex.slice(2), 'hex');
             let hash = (0, util_1.blake2bHash)(bytes, 32);
             let ex = (0, substrate_metadata_1.decodeExtrinsic)(bytes, this.spec.description, this.spec.scaleCodec);
+
+            let tip = ex.signature?.signedExtensions.ChargeTransactionPayment
+
+            // in general, we expect `tip` has a numeric type, if not then ignore for now
+            if(!["bigint", "number"].includes(typeof tip)) {
+                log.debug(`extrinsic ${id} has "tip" value not in numeric type, ignoring`)
+                tip = undefined
+            }
+
             return {
                 id,
                 block_id,
@@ -108,7 +119,7 @@ class BlockParser {
                 signature: ex.signature,
                 call_id: id,
                 call: ex.call,
-                tip: ex.signature?.signedExtensions.ChargeTransactionPayment,
+                tip,
                 hash,
                 pos: -1
             };
diff --git a/node_modules/@subsquid/substrate-ingest/lib/sink.js b/node_modules/@subsquid/substrate-ingest/lib/sink.js
index e0fb1e4..dfc2460 100644
--- a/node_modules/@subsquid/substrate-ingest/lib/sink.js
+++ b/node_modules/@subsquid/substrate-ingest/lib/sink.js
@@ -206,6 +206,7 @@ class PostgresSink {
             await contractsContractEmittedInsert.query(this.db);
             await gearMessageEnqueuedInsert.query(this.db);
             await gearUserMessageSentInsert.query(this.db);
+
         });
         if (this.speed || this.progress) {
             let time = process.hrtime.bigint();
@@ -221,7 +222,10 @@ class PostgresSink {
             return result;
         }
         catch (e) {
-            await this.db.query('ROLLBACK').catch(() => { });
+            await Promise.race([
+                this.db.query('ROLLBACK').catch(() => {  }),
+                new Promise((resolve) => setTimeout(resolve, 5000))
+            ])
             throw e;
         }
     }
